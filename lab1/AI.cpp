#include "AI.h"
#include "SupportFunctions.h"

#include <algorithm>
#include <stdexcept>
#include <memory>
#include <vector>

namespace {

using Matrix = ::Matrix;

Matrix multiplyRec(const Matrix &A, const Matrix &B) {
    int Arows = static_cast<int>(A.size());
    int Acols = Arows ? static_cast<int>(A[0].size()) : 0;
    int Brows = static_cast<int>(B.size());
    int Bcols = Brows ? static_cast<int>(B[0].size()) : 0;
    if (Acols != 5 || Arows != 4 || Brows != 5 || Bcols != 5) {
        throw std::runtime_error("Works only for 4x5 * 5x5 matrices");
    }

    memCounterEnterCall(static_cast<std::size_t>(Arows), static_cast<std::size_t>(Bcols));

    double h1 = (+ A[2][1]) * (- B[1][0] - B[1][4] - B[2][0]);
    double h2 = (+ A[1][1] + A[1][4] - A[2][4]) * (- B[1][4] - B[4][0]);
    double h3 = (- A[2][0] - A[3][0] + A[3][1]) * (- B[0][0] + B[1][4]);
    double h4 = (+ A[0][1] + A[0][3] + A[2][3]) * (- B[1][4] - B[3][0]);
    double h5 = (+ A[0][4] + A[1][1] + A[1][4]) * (- B[1][3] + B[4][0]);
    double h6 = (- A[1][1] - A[1][4] - A[3][4]) * (+ B[1][2] + B[4][0]);
    double h7 = (- A[0][0] + A[3][0] - A[3][1]) * (+ B[0][0] + B[1][3]);
    double h8 = (+ A[2][1] - A[2][2] - A[3][2]) * (- B[1][2] + B[2][0]);
    double h9 = (- A[0][1] - A[0][3] + A[3][3]) * (+ B[1][2] + B[3][0]);
    double h10 = (+ A[1][1] + A[1][4]) * (+ B[4][0]);
    double h11 = (- A[1][0] - A[3][0] + A[3][1]) * (- B[0][0] + B[1][1]);
    double h12 = (+ A[3][0] - A[3][1]) * (+ B[0][0]);
    double h13 = (+ A[0][1] + A[0][3] + A[1][3]) * (+ B[1][1] + B[3][0]);
    double h14 = (+ A[0][2] - A[2][1] + A[2][2]) * (+ B[1][3] + B[2][0]);
    double h15 = (- A[0][1] - A[0][3]) * (+ B[3][0]);
    double h16 = (- A[2][1] + A[2][2]) * (+ B[2][0]);
    double h17 = (+ A[0][1] + A[0][3] - A[1][0] + A[1][1] - A[1][2] + A[1][3] - A[2][1] + A[2][2] - A[3][0] + A[3][1]) * (+ B[1][1]);
    double h18 = (+ A[1][0]) * (+ B[0][0] + B[0][1] + B[4][1]);
    double h19 = (- A[1][2]) * (+ B[2][0] + B[2][1] + B[4][1]);
    double h20 = (- A[0][4] + A[1][0] + A[1][2] - A[1][4]) * (- B[0][0] - B[0][1] + B[0][3] - B[4][1]);
    double h21 = (+ A[1][0] + A[1][2] - A[1][4]) * (+ B[4][1]);
    double h22 = (+ A[0][2] - A[0][3] - A[1][3]) * (+ B[0][0] + B[0][1] - B[0][3] - B[2][0] - B[2][1] + B[2][3] + B[3][3]);
    double h23 = (+ A[0][2]) * (- B[2][0] + B[2][3] + B[3][3]);
    double h24 = (+ A[0][4]) * (- B[3][3] - B[4][0] + B[4][3]);
    double h25 = (- A[0][0]) * (+ B[0][0] - B[0][3]);
    double h26 = (- A[0][2] + A[0][3] + A[0][4]) * (+ B[3][3]);
    double h27 = (+ A[0][2] - A[2][0] + A[2][2]) * (+ B[0][0] - B[0][3] + B[0][4] + B[2][4]);
    double h28 = (- A[2][3]) * (- B[2][4] - B[3][0] - B[3][4]);
    double h29 = (+ A[2][0]) * (+ B[0][0] + B[0][4] + B[2][4]);
    double h30 = (+ A[2][0] - A[2][2] + A[2][3]) * (+ B[2][4]);
    double h31 = (- A[0][3] - A[0][4] - A[2][3]) * (- B[3][3] - B[4][0] + B[4][3] - B[4][4]);
    double h32 = (+ A[1][0] + A[3][0] + A[3][3]) * (+ B[0][2] - B[3][0] - B[3][1] - B[3][2]);
    double h33 = (+ A[3][2]) * (- B[2][0] - B[2][2]);
    double h34 = (+ A[3][3]) * (- B[0][2] + B[3][0] + B[3][2]);
    double h35 = (- A[3][4]) * (+ B[0][2] + B[4][0] + B[4][2]);
    double h36 = (+ A[1][2] - A[1][4] - A[3][4]) * (+ B[2][0] + B[2][1] + B[2][2] + B[4][1]);
    double h37 = (- A[3][0] - A[3][3] + A[3][4]) * (+ B[0][2]);
    double h38 = (- A[1][2] - A[2][0] + A[2][2] - A[2][3]) * (+ B[2][4] + B[3][0] + B[3][1] + B[3][4]);
    double h39 = (- A[2][0] - A[3][0] - A[3][3] + A[3][4]) * (+ B[0][2] + B[4][0] + B[4][2] + B[4][4]);
    double h40 = (- A[0][2] + A[0][3] + A[0][4] - A[3][3]) * (- B[2][0] - B[2][2] + B[2][3] + B[3][3]);
    double h41 = (- A[0][0] + A[3][0] - A[3][4]) * (+ B[0][2] + B[2][0] + B[2][2] - B[2][3] + B[4][0] + B[4][2] - B[4][3]);
    double h42 = (- A[1][0] + A[1][4] - A[2][4]) * (- B[0][0] - B[0][1] - B[0][4] + B[3][0] + B[3][1] + B[3][4] - B[4][1]);
    double h43 = (+ A[1][3]) * (+ B[3][0] + B[3][1]);
    double h44 = (+ A[1][2] + A[2][1] - A[2][2]) * (+ B[1][1] - B[2][0]);
    double h45 = (- A[2][2] + A[2][3] - A[3][2]) * (+ B[2][4] + B[3][0] + B[3][2] + B[3][4] + B[4][0] + B[4][2] + B[4][4]);
    double h46 = (- A[2][4]) * (- B[4][0] - B[4][4]);
    double h47 = (+ A[1][0] - A[1][4] - A[2][0] + A[2][4]) * (+ B[0][0] + B[0][1] + B[0][4] - B[3][0] - B[3][1] - B[3][4]);
    double h48 = (- A[1][2] + A[2][2]) * (+ B[1][1] + B[2][1] + B[2][4] + B[3][0] + B[3][1] + B[3][4]);
    double h49 = (- A[0][0] - A[0][2] + A[0][3] + A[0][4] - A[1][0] - A[1][2] + A[1][3] + A[1][4]) * (- B[0][0] - B[0][1] + B[0][3]);
    double h50 = (- A[0][3] - A[1][3]) * (+ B[1][1] - B[2][0] - B[2][1] + B[2][3] - B[3][1] + B[3][3]);
    double h51 = (+ A[1][1]) * (+ B[1][0] + B[1][1] - B[4][0]);
    double h52 = (+ A[3][1]) * (+ B[0][0] + B[1][0] + B[1][2]);
    double h53 = (- A[0][1]) * (- B[1][0] + B[1][3] + B[3][0]);
    double h54 = (+ A[0][1] + A[0][3] - A[1][1] - A[1][4] - A[2][1] + A[2][2] - A[3][1] + A[3][2] - A[3][3] - A[3][4]) * (+ B[1][2]);
    double h55 = (+ A[0][3] - A[3][3]) * (- B[1][2] + B[2][0] + B[2][2] - B[2][3] + B[3][2] - B[3][3]);
    double h56 = (+ A[0][0] - A[0][4] - A[3][0] + A[3][4]) * (+ B[2][0] + B[2][2] - B[2][3] + B[4][0] + B[4][2] - B[4][3]);
    double h57 = (- A[2][0] - A[3][0]) * (- B[0][2] - B[0][4] - B[1][4] - B[4][0] - B[4][2] - B[4][4]);
    double h58 = (- A[0][3] - A[0][4] - A[2][3] - A[2][4]) * (- B[4][0] + B[4][3] - B[4][4]);
    double h59 = (- A[2][2] + A[2][3] - A[3][2] + A[3][3]) * (+ B[3][0] + B[3][2] + B[3][4] + B[4][0] + B[4][2] + B[4][4]);
    double h60 = (+ A[1][4] + A[3][4]) * (+ B[1][2] - B[2][0] - B[2][1] - B[2][2] - B[4][1] - B[4][2]);
    double h61 = (+ A[0][3] + A[2][3]) * (+ B[0][0] - B[0][3] + B[0][4] - B[1][4] - B[3][3] + B[3][4] - B[4][0] + B[4][3] - B[4][4]);
    double h62 = (+ A[1][0] + A[3][0]) * (+ B[0][1] + B[0][2] + B[1][1] - B[3][0] - B[3][1] - B[3][2]);
    double h63 = (- A[2][2] - A[3][2]) * (- B[1][2] - B[2][2] - B[2][4] - B[3][0] - B[3][2] - B[3][4]);
    double h64 = (+ A[0][0] - A[0][2] - A[0][3] + A[2][0] - A[2][2] - A[2][3]) * (+ B[0][0] - B[0][3] + B[0][4]);
    double h65 = (- A[0][0] + A[3][0]) * (- B[0][2] + B[0][3] + B[1][3] - B[4][0] - B[4][2] + B[4][3]);
    double h66 = (+ A[0][0] - A[0][1] + A[0][2] - A[0][4] - A[1][1] - A[1][4] - A[2][1] + A[2][2] - A[3][0] + A[3][1]) * (+ B[1][3]);
    double h67 = (+ A[1][4] - A[2][4]) * (+ B[0][0] + B[0][1] + B[0][4] - B[1][4] - B[3][0] - B[3][1] - B[3][4] + B[4][1] + B[4][4]);
    double h68 = (+ A[0][0] + A[0][2] - A[0][3] - A[0][4] - A[3][0] - A[3][2] + A[3][3] + A[3][4]) * (- B[2][0] - B[2][2] + B[2][3]);
    double h69 = (- A[0][2] + A[0][3] - A[1][2] + A[1][3]) * (- B[1][3] - B[2][0] - B[2][1] + B[2][3] - B[4][1] + B[4][3]);
    double h70 = (+ A[1][2] - A[1][4] + A[3][2] - A[3][4]) * (- B[2][0] - B[2][1] - B[2][2]);
    double h71 = (- A[2][0] + A[2][2] - A[2][3] + A[2][4] - A[3][0] + A[3][2] - A[3][3] + A[3][4]) * (- B[4][0] - B[4][2] - B[4][4]);
    double h72 = (- A[1][0] - A[1][3] - A[3][0] - A[3][3]) * (+ B[3][0] + B[3][1] + B[3][2]);
    double h73 = (+ A[0][2] - A[0][3] - A[0][4] + A[1][2] - A[1][3] - A[1][4]) * (+ B[0][0] + B[0][1] - B[0][3] + B[1][3] + B[4][1] - B[4][3]);
    double h74 = (+ A[1][0] - A[1][2] + A[1][3] - A[2][0] + A[2][2] - A[2][3]) * (+ B[3][0] + B[3][1] + B[3][4]);
    double h75 = (+ A[0][1] + A[0][3] - A[1][1] - A[1][4] - A[2][0] + A[2][1] + A[2][3] + A[2][4] - A[3][0] + A[3][1]) * (- B[1][4]);
    double h76 = (+ A[0][2] + A[2][2]) * (- B[0][0] + B[0][3] - B[0][4] + B[1][3] + B[2][3] - B[2][4]);


    double c11 = - h10 + h12 + h14 - h15 - h16 + h53 + h5 - h66 - h7;
    double c21 = + h10 + h11 - h12 + h13 + h15 + h16 - h17 - h44 + h51;
    double c31 = + h10 - h12 + h15 + h16 - h1 + h2 + h3 - h4 + h75;
    double c41 = - h10 + h12 - h15 - h16 + h52 + h54 - h6 - h8 + h9;
    double c12 = + h13 + h15 + h20 + h21 - h22 + h23 + h25 - h43 + h49 + h50;
    double c22 = - h11 + h12 - h13 - h15 - h16 + h17 + h18 - h19 - h21 + h43 + h44;
    double c32 = - h16 - h19 - h21 - h28 - h29 - h38 + h42 + h44 - h47 + h48;
    double c42 = + h11 - h12 - h18 + h21 - h32 + h33 - h34 - h36 + h62 - h70;
    double c13 = + h15 + h23 + h24 + h34 - h37 + h40 - h41 + h55 - h56 - h9;
    double c23 = - h10 + h19 + h32 + h35 + h36 + h37 - h43 - h60 - h6 - h72;
    double c33 = - h16 - h28 + h33 + h37 - h39 + h45 - h46 + h63 - h71 - h8;
    double c43 = + h10 + h15 + h16 - h33 + h34 - h35 - h37 - h54 + h6 + h8 - h9;
    double c14 = - h10 + h12 + h14 - h16 + h23 + h24 + h25 + h26 + h5 - h66 - h7;
    double c24 = + h10 + h18 - h19 + h20 - h22 - h24 - h26 - h5 - h69 + h73;
    double c34 = - h14 + h16 - h23 - h26 + h27 + h29 + h31 + h46 - h58 + h76;
    double c44 = + h12 + h25 + h26 - h33 - h35 - h40 + h41 + h65 - h68 - h7;
    double c15 = + h15 + h24 + h25 + h27 - h28 + h30 + h31 - h4 + h61 + h64;
    double c25 = - h10 - h18 - h2 - h30 - h38 + h42 - h43 + h46 + h67 + h74;
    double c35 = - h10 + h12 - h15 + h28 + h29 - h2 - h30 - h3 + h46 + h4 - h75;
    double c45 = - h12 - h29 + h30 - h34 + h35 + h39 + h3 - h45 + h57 + h59;

    Matrix M(4, std::vector<double>(5, 0.0));
    M[0][0] = c11;
    M[1][0] = c21;
    M[2][0] = c31;
    M[3][0] = c41;
    M[0][1] = c12;
    M[1][1] = c22;
    M[2][1] = c32;
    M[3][1] = c42;
    M[0][2] = c13;
    M[1][2] = c23;
    M[2][2] = c33;
    M[3][2] = c43;
    M[0][3] = c14;
    M[1][3] = c24;
    M[2][3] = c34;
    M[3][3] = c44;
    M[0][4] = c15;
    M[1][4] = c25;
    M[2][4] = c35;
    M[3][4] = c45;

    memCounterExitCall(static_cast<std::size_t>(Arows), static_cast<std::size_t>(Bcols));
    return M;
}

} // namespace (internal)


class AIImpl : public IMnozenie {
public:
    Matrix multiply(const Matrix &A, const Matrix &B) override {
        return multiplyRec(A, B);
    }
};

std::unique_ptr<IMnozenie> createAI() {
    return std::make_unique<AIImpl>();
}

